// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  boats         Boat[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Boat {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  capacity    Int
  length      Float
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amenities   Amenity[]
  media       Media[]
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Amenity {
  id        String   @id @default(cuid())
  name      String
  iconName  String   @unique
  boats     Boat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoatAmenityRelation {
  id        String   @id @default(cuid())
  boat      Boat     @relation(fields: [boatId], references: [id], onDelete: Cascade)
  boatId    String
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boatId, amenityId])
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String   @default("IMAGE") // "IMAGE" ou "VIDEO"
  publicId  String?
  order     Int      @default(0)  // Novo campo para ordenação
  boat      Boat     @relation(fields: [boatId], references: [id], onDelete: Cascade)
  boatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  guests      Int
  status      String   @default("PENDENTE")
  totalPrice  Float
  boat        Boat     @relation(fields: [boatId], references: [id])
  boatId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
